calibrate: PosteriorDistribution x y -> SCRIPT
calibrate calibration_method
> {calibration_method}

profile: Profile -> SCRIPT
profile profile_method
> {profile_method}

diversity: Diversity Double -> SCRIPT
diversity diversity_method
> {diversity_method}

seed: Seed
seed 
> seed

var_int: Text -> Var Int
var_int var_name
> {var_name}

var_double: Text -> Var Double
var_double var_name
> {var_name}

inputs: InputList a -> Input b
inputs list
> Seq(
>    {list}
> )

single_input: Var a -> InputList a
single_input var 
> {var} 

add_input: Var a -> InputList b -> InputList (Pair a b)
add_input var list
> {var},
> {list}

no_more_input: InputList a -> InputList a
no_more_input list
> {list} 

mapped_inputs: MappedInputList a -> MappedInput b
mapped_inputs list
> Seq(
>    {list}
> )

single_mapped_input: Var a -> Text -> MappedInputList a
single_mapped_input var mapped_name
> {var} mapped "{mapped_name}" 

add_mapped_input: Var a -> Text -> MappedInputList b -> MappedInputList (Pair a b)
add_mapped_input var mapped_name list 
> {var} mapped "{mapped_name}",
> {list}

no_more_mapped_input: MappedInputList a -> MappedInputList a
no_more_mapped_input list
> {list}

mapped_outputs: MappedOutputList a -> MappedOutput b
mapped_outputs list
> Seq(
>    {list}
> )

single_mapped_output: Var a -> Text -> MappedOutputList a
single_mapped_output var mapped_name
> {var} mapped "{mapped_name}" 

add_mapped_output: Var a -> Text -> MappedOutputList b -> MappedOutputList (Pair a b)
add_mapped_output var mapped_name list
> {var} mapped "{mapped_name}",
> {list}

no_more_mapped_output: MappedOutputList a -> MappedOutputList a
no_more_mapped_output list
> {list}

outputs: OutputList a -> Output b
outputs list
> Seq(
>    {list}
> )

single_output: Var a -> OutputList a
single_output var 
> {var} 

add_output: Var a -> OutputList b -> OutputList (Pair a b)
add_output var list
> {var},
> {list}

no_more_output: OutputList a -> OutputList a
no_more_output list
> {list}

scala_model: Text -> Input x -> Output y -> Model x y
scala_model source inputs outputs
> ScalaTask("{source}") set (
>   inputs += {inputs},
>   outputs += {outputs}
> )

netlogo_6_model: FilePath -> Text -> Text -> MappedInput x -> MappedOutput y -> Seed -> Model x y
netlogo_6_model source netlogo_cmd_setup netlogo_cmd_go mapped_inputs mapped_outputs seed
> val fireTask =
>   NetLogo6Task(
>     workDirectory / "{source}", 
>     List(
>       "random-seed ${{seed}}",
>       "{netlogo_cmd_setup}",
>       "{netlogo_cmd_go}")
>     ) set (
>     inputs += {seed},
>     inputs += {mapped_inputs},
>     outputs += {seed},
>     outputs += {mapped_outputs}
>   )

nsga2: Model x y -> Bounds x -> Int -> Output y -> Int -> Int -> Pareto x
nsga2 model bounds population_size objectives termination parallelism
> NSGA2Evolution(
>   evaluation = {model},
>   objectives = {objectives},
>   mu = {population_size},
>   genome = {bounds},
>   termination = {termination},
>   parallelism = {parallelism}
> ) hook (workDirectory / "path/to/a/directory")

morris: Model x y -> Bounds x -> Output x -> Int -> Int -> MorrisSensitivityIndex x y
morris model bounds outputs repetitions levels
> SensitivityMorris(
>   evaluation = {model},
>   inputs = {bounds},
>   outputs = {outputs},
>   repetitions = {repetitions},
>   levels = {levels}
> ) hook display

saltelli: Model x y -> Bounds x -> Output y -> Int -> GlobalSensitivityIndex x y
saltelli model bounds outputs samples
> SensitivitySaltelli(
>   evaluation = {model},
>   inputs = {bounds},
>   outputs = {outputs},
>   samples = {samples}
> ) hook display


profile: Model x y -> Int -> Output y -> Var a -> Int -> Bounds x -> Int -> Int -> Int -> Seed -> Profile
profile model replications objective profiled_var number_of_bins genome_bounds parallelism job_duration_minutes termination seed 
> ProfileEvolution(
>   evaluation = {model},
>   objective = {objective},
>   x = {profiled_var},
>   nX = {number_of_bins},
>   genome = {genome_bounds},
>   termination = {termination},
>   parallelism = {parallelism},
>   stochastic = Stochastic(seed = {seed}, replications = {replications}),
>   distribution = Island({job_duration_minutes} minutes)
> ) hook(workDirectory / "path/to/a/directory")

pse: Model x y -> Bounds x -> Grid y -> Int -> Int -> Seed -> Int -> Diversity y
pse model genome_bounds grid parallelism termination seed output_frequency
> PSEEvolution(
>   evaluation = {model},
>   parallelism = {parallelism},
>   termination = {termination},
>   genome = {genome_bounds},
>   objectives = {grid},
>   stochastic = Stochastic(seed = {seed})
> ) hook (workDirectory / "results", frequency = {output_frequency})

grid: GridList x -> Grid x
grid list
> Seq(
>   {list}
> )

single_grid_dimension: Var a -> a -> a -> a -> GridList a
single_grid_dimension var min max by
> {var} in ({min} to {max} by {by})

add_grid_dimension: Var a -> a -> a -> a -> GridList b -> GridList (Pair a b)
add_grid_dimension var min max by list
> {var} in ({min} to {max} by {by}),
> {list}

no_more_grid_dimension: GridList a -> GridList a
no_more_grid_dimension grid
> {grid}

bounds: BoundsList x -> Bounds x
bounds list
> Seq(
>   {list}
> )

single_bound_dimension: Var a -> a -> a -> BoundsList a
single_bound_dimension var min max
> {var} in ({min}, {max})

add_bound_dimension: Var a -> a -> a -> BoundsList b -> BoundsList (Pair a b)
add_bound_dimension var min max list
> {var} in ({min}, {max}),
> {list}

no_more_bound_dimensions: BoundsList a -> BoundsList a
no_more_bound_dimensions bounds
> {bounds}

abc: Model x y -> Prior x -> Observed y -> Int -> Int -> Double -> Int -> Int -> PosteriorDistribution x y
abc model prior data sample_size generated p_acc_min stop_sam_size par
> IslandABC(
>   evaluation = 
>     {model},
>   prior = 
>     {prior},
>   observed = 
>      {data},
>   sample = {sample_size},
>   generated = {generated},
>   minAcceptedRatio = {p_acc_min},
>   stopSampleSize = {stop_sam_size},
>   parallelism={par}
> ) hook(workDirectory / "posterior_sample")

observed: ObservedList a -> Observed a
observed list
> Seq(
>   {list}
> )

single_observed_dimension: Var a -> a -> ObservedList a
single_observed_dimension var value
> {var} -> {value}

add_observed_dimension: Var a -> a -> ObservedList b -> ObservedList (Pair a b)
add_observed_dimension var value obs_b
> {var} -> {value},
> {obs_b}

no_more_observed_dimension: ObservedList a -> ObservedList a
no_more_observed_dimension list
> {list}

independant_priors: IndependentPriorsList a -> Prior a
independant_priors x
> IndependentPriors(
>   {x}
> )

add_independant_prior: UnivariatePrior a -> IndependentPriorsList b -> IndependentPriorsList (Pair a b)
add_independant_prior new_dist list
> {new_dist},
> {list}

single_independant_prior: UnivariatePrior a -> IndependentPriorsList a 
single_independant_prior dist
> {dist}

uniform_prior: Var a -> a -> a -> UnivariatePrior a
uniform_prior var low_bound up_bound
> UniformPrior({var}, {low_bound}, {up_bound}) 

beta_prior: Var a -> a -> a -> UnivariatePrior a
beta_prior var alpha beta
> UniformPrior({var}, {alpha}, {beta}) 

